#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ASDataContext
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="AutoServices")]
	public partial class ASDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertService(Service instance);
    partial void UpdateService(Service instance);
    partial void DeleteService(Service instance);
    partial void InsertCarBrand(CarBrand instance);
    partial void UpdateCarBrand(CarBrand instance);
    partial void DeleteCarBrand(CarBrand instance);
    partial void InsertCompanyCarBrand(CompanyCarBrand instance);
    partial void UpdateCompanyCarBrand(CompanyCarBrand instance);
    partial void DeleteCompanyCarBrand(CompanyCarBrand instance);
    partial void InsertCompanyService(CompanyService instance);
    partial void UpdateCompanyService(CompanyService instance);
    partial void DeleteCompanyService(CompanyService instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUserCompany(UserCompany instance);
    partial void UpdateUserCompany(UserCompany instance);
    partial void DeleteUserCompany(UserCompany instance);
    partial void InsertGrabedCompany(GrabedCompany instance);
    partial void UpdateGrabedCompany(GrabedCompany instance);
    partial void DeleteGrabedCompany(GrabedCompany instance);
    #endregion
		
		public ASDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ASDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ASDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ASDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Service> Services
		{
			get
			{
				return this.GetTable<Service>();
			}
		}
		
		public System.Data.Linq.Table<CarBrand> CarBrands
		{
			get
			{
				return this.GetTable<CarBrand>();
			}
		}
		
		public System.Data.Linq.Table<CompanyCarBrand> CompanyCarBrands
		{
			get
			{
				return this.GetTable<CompanyCarBrand>();
			}
		}
		
		public System.Data.Linq.Table<CompanyService> CompanyServices
		{
			get
			{
				return this.GetTable<CompanyService>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<UserCompany> UserCompanies
		{
			get
			{
				return this.GetTable<UserCompany>();
			}
		}
		
		public System.Data.Linq.Table<Picture> Pictures
		{
			get
			{
				return this.GetTable<Picture>();
			}
		}
		
		public System.Data.Linq.Table<GrabedCompany> GrabedCompanies
		{
			get
			{
				return this.GetTable<GrabedCompany>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetServices")]
		public ISingleResult<GetServicesResult> GetServices([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(200)")] string filter, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Latitude", DbType="Float")] System.Nullable<double> latitude, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Longitude", DbType="Float")] System.Nullable<double> longitude)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), filter, latitude, longitude);
			return ((ISingleResult<GetServicesResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetServiceCompanies")]
		public ISingleResult<GetServiceCompaniesResult> GetServiceCompanies([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> serviceId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Latitude", DbType="Float")] System.Nullable<double> latitude, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Longitude", DbType="Float")] System.Nullable<double> longitude)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), serviceId, latitude, longitude);
			return ((ISingleResult<GetServiceCompaniesResult>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Services")]
	public partial class Service : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _title;
		
		private string _description;
		
		private System.Nullable<int> _parent;
		
		private EntitySet<CompanyService> _CompanyServices;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnparentChanging(System.Nullable<int> value);
    partial void OnparentChanged();
    #endregion
		
		public Service()
		{
			this._CompanyServices = new EntitySet<CompanyService>(new Action<CompanyService>(this.attach_CompanyServices), new Action<CompanyService>(this.detach_CompanyServices));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(250)")]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="nvarchar(max)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parent", DbType="int")]
		public System.Nullable<int> parent
		{
			get
			{
				return this._parent;
			}
			set
			{
				if ((this._parent != value))
				{
					this.OnparentChanging(value);
					this.SendPropertyChanging();
					this._parent = value;
					this.SendPropertyChanged("parent");
					this.OnparentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_CompanyService", Storage="_CompanyServices", ThisKey="id", OtherKey="serviceId")]
		public EntitySet<CompanyService> CompanyServices
		{
			get
			{
				return this._CompanyServices;
			}
			set
			{
				this._CompanyServices.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CompanyServices(CompanyService entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_CompanyServices(CompanyService entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CarBrand")]
	public partial class CarBrand : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _model;
		
		private EntitySet<CompanyCarBrand> _CompanyCars;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    #endregion
		
		public CarBrand()
		{
			this._CompanyCars = new EntitySet<CompanyCarBrand>(new Action<CompanyCarBrand>(this.attach_CompanyCars), new Action<CompanyCarBrand>(this.detach_CompanyCars));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_model", DbType="NVarChar(250)")]
		public string title
		{
			get
			{
				return this._model;
			}
			set
			{
				if ((this._model != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._model = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarBrand_CompanyCarBrand", Storage="_CompanyCars", ThisKey="id", OtherKey="carBrandId")]
		public EntitySet<CompanyCarBrand> CompanyCarBrands
		{
			get
			{
				return this._CompanyCars;
			}
			set
			{
				this._CompanyCars.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CompanyCars(CompanyCarBrand entity)
		{
			this.SendPropertyChanging();
			entity.CarBrand = this;
		}
		
		private void detach_CompanyCars(CompanyCarBrand entity)
		{
			this.SendPropertyChanging();
			entity.CarBrand = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompanyCarBrands")]
	public partial class CompanyCarBrand : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _companyId;
		
		private int _carModelId;
		
		private EntityRef<CarBrand> _CarModel;
		
		private EntityRef<GrabedCompany> _GrabedCompany;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncompanyIdChanging(int value);
    partial void OncompanyIdChanged();
    partial void OncarBrandIdChanging(int value);
    partial void OncarBrandIdChanged();
    #endregion
		
		public CompanyCarBrand()
		{
			this._CarModel = default(EntityRef<CarBrand>);
			this._GrabedCompany = default(EntityRef<GrabedCompany>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_companyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int companyId
		{
			get
			{
				return this._companyId;
			}
			set
			{
				if ((this._companyId != value))
				{
					if (this._GrabedCompany.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncompanyIdChanging(value);
					this.SendPropertyChanging();
					this._companyId = value;
					this.SendPropertyChanged("companyId");
					this.OncompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_carModelId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int carBrandId
		{
			get
			{
				return this._carModelId;
			}
			set
			{
				if ((this._carModelId != value))
				{
					if (this._CarModel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncarBrandIdChanging(value);
					this.SendPropertyChanging();
					this._carModelId = value;
					this.SendPropertyChanged("carBrandId");
					this.OncarBrandIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarBrand_CompanyCarBrand", Storage="_CarModel", ThisKey="carBrandId", OtherKey="id", IsForeignKey=true)]
		public CarBrand CarBrand
		{
			get
			{
				return this._CarModel.Entity;
			}
			set
			{
				CarBrand previousValue = this._CarModel.Entity;
				if (((previousValue != value) 
							|| (this._CarModel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CarModel.Entity = null;
						previousValue.CompanyCarBrands.Remove(this);
					}
					this._CarModel.Entity = value;
					if ((value != null))
					{
						value.CompanyCarBrands.Add(this);
						this._carModelId = value.id;
					}
					else
					{
						this._carModelId = default(int);
					}
					this.SendPropertyChanged("CarBrand");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GrabedCompany_CompanyCarBrand", Storage="_GrabedCompany", ThisKey="companyId", OtherKey="id", IsForeignKey=true)]
		public GrabedCompany GrabedCompany
		{
			get
			{
				return this._GrabedCompany.Entity;
			}
			set
			{
				GrabedCompany previousValue = this._GrabedCompany.Entity;
				if (((previousValue != value) 
							|| (this._GrabedCompany.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GrabedCompany.Entity = null;
						previousValue.CompanyCarBrands.Remove(this);
					}
					this._GrabedCompany.Entity = value;
					if ((value != null))
					{
						value.CompanyCarBrands.Add(this);
						this._companyId = value.id;
					}
					else
					{
						this._companyId = default(int);
					}
					this.SendPropertyChanged("GrabedCompany");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompanyServices")]
	public partial class CompanyService : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _companyId;
		
		private int _serviceId;
		
		private EntityRef<Service> _Service;
		
		private EntityRef<GrabedCompany> _GrabedCompany;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncompanyIdChanging(int value);
    partial void OncompanyIdChanged();
    partial void OnserviceIdChanging(int value);
    partial void OnserviceIdChanged();
    #endregion
		
		public CompanyService()
		{
			this._Service = default(EntityRef<Service>);
			this._GrabedCompany = default(EntityRef<GrabedCompany>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_companyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int companyId
		{
			get
			{
				return this._companyId;
			}
			set
			{
				if ((this._companyId != value))
				{
					if (this._GrabedCompany.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncompanyIdChanging(value);
					this.SendPropertyChanging();
					this._companyId = value;
					this.SendPropertyChanged("companyId");
					this.OncompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_serviceId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int serviceId
		{
			get
			{
				return this._serviceId;
			}
			set
			{
				if ((this._serviceId != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnserviceIdChanging(value);
					this.SendPropertyChanging();
					this._serviceId = value;
					this.SendPropertyChanged("serviceId");
					this.OnserviceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_CompanyService", Storage="_Service", ThisKey="serviceId", OtherKey="id", IsForeignKey=true)]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.CompanyServices.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.CompanyServices.Add(this);
						this._serviceId = value.id;
					}
					else
					{
						this._serviceId = default(int);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GrabedCompany_CompanyService", Storage="_GrabedCompany", ThisKey="companyId", OtherKey="id", IsForeignKey=true)]
		public GrabedCompany GrabedCompany
		{
			get
			{
				return this._GrabedCompany.Entity;
			}
			set
			{
				GrabedCompany previousValue = this._GrabedCompany.Entity;
				if (((previousValue != value) 
							|| (this._GrabedCompany.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GrabedCompany.Entity = null;
						previousValue.CompanyServices.Remove(this);
					}
					this._GrabedCompany.Entity = value;
					if ((value != null))
					{
						value.CompanyServices.Add(this);
						this._companyId = value.id;
					}
					else
					{
						this._companyId = default(int);
					}
					this.SendPropertyChanged("GrabedCompany");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserProfile")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _UserName;
		
		private EntitySet<UserCompany> _UserCompanies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    #endregion
		
		public User()
		{
			this._UserCompanies = new EntitySet<UserCompany>(new Action<UserCompany>(this.attach_UserCompanies), new Action<UserCompany>(this.detach_UserCompanies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(56) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserCompany", Storage="_UserCompanies", ThisKey="UserId", OtherKey="userId")]
		public EntitySet<UserCompany> UserCompanies
		{
			get
			{
				return this._UserCompanies;
			}
			set
			{
				this._UserCompanies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserCompanies(UserCompany entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserCompanies(UserCompany entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserCompanies")]
	public partial class UserCompany : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _userId;
		
		private int _companyId;
		
		private EntityRef<User> _User;
		
		private EntityRef<GrabedCompany> _GrabedCompany;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIdChanging(int value);
    partial void OnuserIdChanged();
    partial void OncompanyIdChanging(int value);
    partial void OncompanyIdChanged();
    #endregion
		
		public UserCompany()
		{
			this._User = default(EntityRef<User>);
			this._GrabedCompany = default(EntityRef<GrabedCompany>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_companyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int companyId
		{
			get
			{
				return this._companyId;
			}
			set
			{
				if ((this._companyId != value))
				{
					if (this._GrabedCompany.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncompanyIdChanging(value);
					this.SendPropertyChanging();
					this._companyId = value;
					this.SendPropertyChanged("companyId");
					this.OncompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserCompany", Storage="_User", ThisKey="userId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserCompanies.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserCompanies.Add(this);
						this._userId = value.UserId;
					}
					else
					{
						this._userId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GrabedCompany_UserCompany", Storage="_GrabedCompany", ThisKey="companyId", OtherKey="id", IsForeignKey=true)]
		public GrabedCompany GrabedCompany
		{
			get
			{
				return this._GrabedCompany.Entity;
			}
			set
			{
				GrabedCompany previousValue = this._GrabedCompany.Entity;
				if (((previousValue != value) 
							|| (this._GrabedCompany.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GrabedCompany.Entity = null;
						previousValue.UserCompanies.Remove(this);
					}
					this._GrabedCompany.Entity = value;
					if ((value != null))
					{
						value.UserCompanies.Add(this);
						this._companyId = value.id;
					}
					else
					{
						this._companyId = default(int);
					}
					this.SendPropertyChanged("GrabedCompany");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Pictures")]
	public partial class Picture
	{
		
		private int _id;
		
		private int _companyId;
		
		private string _url;
		
		public Picture()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this._id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_companyId", DbType="Int NOT NULL")]
		public int companyId
		{
			get
			{
				return this._companyId;
			}
			set
			{
				if ((this._companyId != value))
				{
					this._companyId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_url", CanBeNull=false)]
		public string url
		{
			get
			{
				return this._url;
			}
			set
			{
				if ((this._url != value))
				{
					this._url = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GrabedCompanies")]
	public partial class GrabedCompany : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _title;
		
		private string _address;
		
		private string _phoness;
		
		private string _detailUrl;
		
		private string _webSite;
		
		private bool _checked;
		
		private System.DateTime _createTime;
		
		private System.DateTime _updateTime;
		
		private string _stype;
		
		private string _description;
		
		private string _services;
		
		private string _carBrands;
		
		private string _images;
		
		private System.Nullable<double> _llat;
		
		private System.Nullable<double> _llng;
		
		private EntitySet<CompanyCarBrand> _CompanyCarBrands;
		
		private EntitySet<CompanyService> _CompanyServices;
		
		private EntitySet<UserCompany> _UserCompanies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void OnphonessChanging(string value);
    partial void OnphonessChanged();
    partial void OndetailUrlChanging(string value);
    partial void OndetailUrlChanged();
    partial void OnwebSiteChanging(string value);
    partial void OnwebSiteChanged();
    partial void OncheckedChanging(bool value);
    partial void OncheckedChanged();
    partial void OncreateTimeChanging(System.DateTime value);
    partial void OncreateTimeChanged();
    partial void OnupdateTimeChanging(System.DateTime value);
    partial void OnupdateTimeChanged();
    partial void OnstypeChanging(string value);
    partial void OnstypeChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnservicesChanging(string value);
    partial void OnservicesChanged();
    partial void OncarBrandsChanging(string value);
    partial void OncarBrandsChanged();
    partial void OnimagesChanging(string value);
    partial void OnimagesChanged();
    partial void OnllatChanging(System.Nullable<double> value);
    partial void OnllatChanged();
    partial void OnllngChanging(System.Nullable<double> value);
    partial void OnllngChanged();
    #endregion
		
		public GrabedCompany()
		{
			this._CompanyCarBrands = new EntitySet<CompanyCarBrand>(new Action<CompanyCarBrand>(this.attach_CompanyCarBrands), new Action<CompanyCarBrand>(this.detach_CompanyCarBrands));
			this._CompanyServices = new EntitySet<CompanyService>(new Action<CompanyService>(this.attach_CompanyServices), new Action<CompanyService>(this.detach_CompanyServices));
			this._UserCompanies = new EntitySet<UserCompany>(new Action<UserCompany>(this.attach_UserCompanies), new Action<UserCompany>(this.detach_UserCompanies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(250)")]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="NVarChar(500)")]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phoness", DbType="NVarChar(250)")]
		public string phoness
		{
			get
			{
				return this._phoness;
			}
			set
			{
				if ((this._phoness != value))
				{
					this.OnphonessChanging(value);
					this.SendPropertyChanging();
					this._phoness = value;
					this.SendPropertyChanged("phoness");
					this.OnphonessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_detailUrl", DbType="NVarChar(500)")]
		public string detailUrl
		{
			get
			{
				return this._detailUrl;
			}
			set
			{
				if ((this._detailUrl != value))
				{
					this.OndetailUrlChanging(value);
					this.SendPropertyChanging();
					this._detailUrl = value;
					this.SendPropertyChanged("detailUrl");
					this.OndetailUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_webSite", DbType="NVarChar(500)")]
		public string webSite
		{
			get
			{
				return this._webSite;
			}
			set
			{
				if ((this._webSite != value))
				{
					this.OnwebSiteChanging(value);
					this.SendPropertyChanging();
					this._webSite = value;
					this.SendPropertyChanged("webSite");
					this.OnwebSiteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="checked", Storage="_checked", DbType="Bit NOT NULL")]
		public bool @checked
		{
			get
			{
				return this._checked;
			}
			set
			{
				if ((this._checked != value))
				{
					this.OncheckedChanging(value);
					this.SendPropertyChanging();
					this._checked = value;
					this.SendPropertyChanged("@checked");
					this.OncheckedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_createTime", DbType="DateTime NOT NULL")]
		public System.DateTime createTime
		{
			get
			{
				return this._createTime;
			}
			set
			{
				if ((this._createTime != value))
				{
					this.OncreateTimeChanging(value);
					this.SendPropertyChanging();
					this._createTime = value;
					this.SendPropertyChanged("createTime");
					this.OncreateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_updateTime", DbType="DateTime NOT NULL")]
		public System.DateTime updateTime
		{
			get
			{
				return this._updateTime;
			}
			set
			{
				if ((this._updateTime != value))
				{
					this.OnupdateTimeChanging(value);
					this.SendPropertyChanging();
					this._updateTime = value;
					this.SendPropertyChanged("updateTime");
					this.OnupdateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_stype", DbType="NVarChar(250)")]
		public string stype
		{
			get
			{
				return this._stype;
			}
			set
			{
				if ((this._stype != value))
				{
					this.OnstypeChanging(value);
					this.SendPropertyChanging();
					this._stype = value;
					this.SendPropertyChanged("stype");
					this.OnstypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(MAX)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_services", DbType="NVarChar(MAX)")]
		public string services
		{
			get
			{
				return this._services;
			}
			set
			{
				if ((this._services != value))
				{
					this.OnservicesChanging(value);
					this.SendPropertyChanging();
					this._services = value;
					this.SendPropertyChanged("services");
					this.OnservicesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_carBrands", DbType="NVarChar(MAX)")]
		public string carBrands
		{
			get
			{
				return this._carBrands;
			}
			set
			{
				if ((this._carBrands != value))
				{
					this.OncarBrandsChanging(value);
					this.SendPropertyChanging();
					this._carBrands = value;
					this.SendPropertyChanged("carBrands");
					this.OncarBrandsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_images", DbType="NVarChar(MAX)")]
		public string images
		{
			get
			{
				return this._images;
			}
			set
			{
				if ((this._images != value))
				{
					this.OnimagesChanging(value);
					this.SendPropertyChanging();
					this._images = value;
					this.SendPropertyChanged("images");
					this.OnimagesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_llat", DbType="Float")]
		public System.Nullable<double> llat
		{
			get
			{
				return this._llat;
			}
			set
			{
				if ((this._llat != value))
				{
					this.OnllatChanging(value);
					this.SendPropertyChanging();
					this._llat = value;
					this.SendPropertyChanged("llat");
					this.OnllatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_llng", DbType="Float")]
		public System.Nullable<double> llng
		{
			get
			{
				return this._llng;
			}
			set
			{
				if ((this._llng != value))
				{
					this.OnllngChanging(value);
					this.SendPropertyChanging();
					this._llng = value;
					this.SendPropertyChanged("llng");
					this.OnllngChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GrabedCompany_CompanyCarBrand", Storage="_CompanyCarBrands", ThisKey="id", OtherKey="companyId")]
		public EntitySet<CompanyCarBrand> CompanyCarBrands
		{
			get
			{
				return this._CompanyCarBrands;
			}
			set
			{
				this._CompanyCarBrands.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GrabedCompany_CompanyService", Storage="_CompanyServices", ThisKey="id", OtherKey="companyId")]
		public EntitySet<CompanyService> CompanyServices
		{
			get
			{
				return this._CompanyServices;
			}
			set
			{
				this._CompanyServices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GrabedCompany_UserCompany", Storage="_UserCompanies", ThisKey="id", OtherKey="companyId")]
		public EntitySet<UserCompany> UserCompanies
		{
			get
			{
				return this._UserCompanies;
			}
			set
			{
				this._UserCompanies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CompanyCarBrands(CompanyCarBrand entity)
		{
			this.SendPropertyChanging();
			entity.GrabedCompany = this;
		}
		
		private void detach_CompanyCarBrands(CompanyCarBrand entity)
		{
			this.SendPropertyChanging();
			entity.GrabedCompany = null;
		}
		
		private void attach_CompanyServices(CompanyService entity)
		{
			this.SendPropertyChanging();
			entity.GrabedCompany = this;
		}
		
		private void detach_CompanyServices(CompanyService entity)
		{
			this.SendPropertyChanging();
			entity.GrabedCompany = null;
		}
		
		private void attach_UserCompanies(UserCompany entity)
		{
			this.SendPropertyChanging();
			entity.GrabedCompany = this;
		}
		
		private void detach_UserCompanies(UserCompany entity)
		{
			this.SendPropertyChanging();
			entity.GrabedCompany = null;
		}
	}
	
	public partial class GetServicesResult
	{
		
		private int _id;
		
		private string _title;
		
		private System.Nullable<int> _count;
		
		private System.Nullable<double> _distance;
		
		public GetServicesResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL")]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this._id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(250)")]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this._title = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_count", DbType="Int")]
		public System.Nullable<int> count
		{
			get
			{
				return this._count;
			}
			set
			{
				if ((this._count != value))
				{
					this._count = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_distance", DbType="Float")]
		public System.Nullable<double> distance
		{
			get
			{
				return this._distance;
			}
			set
			{
				if ((this._distance != value))
				{
					this._distance = value;
				}
			}
		}
	}
	
	public partial class GetServiceCompaniesResult
	{
		
		private int _companyId;
		
		private int _serviceId;
		
		private int _id;
		
		private string _title;
		
		private string _address;
		
		private string _phoness;
		
		private string _detailUrl;
		
		private string _webSite;
		
		private bool _checked;
		
		private System.DateTime _createTime;
		
		private System.DateTime _updateTime;
		
		private string _stype;
		
		private string _description;
		
		private string _services;
		
		private string _carBrands;
		
		private string _images;
		
		private System.Nullable<double> _llat;
		
		private System.Nullable<double> _llng;
		
		private System.Nullable<double> _distance;
		
		public GetServiceCompaniesResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_companyId", DbType="Int NOT NULL")]
		public int companyId
		{
			get
			{
				return this._companyId;
			}
			set
			{
				if ((this._companyId != value))
				{
					this._companyId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_serviceId", DbType="Int NOT NULL")]
		public int serviceId
		{
			get
			{
				return this._serviceId;
			}
			set
			{
				if ((this._serviceId != value))
				{
					this._serviceId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL")]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this._id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(250)")]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this._title = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="NVarChar(500)")]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this._address = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phoness", DbType="NVarChar(250)")]
		public string phoness
		{
			get
			{
				return this._phoness;
			}
			set
			{
				if ((this._phoness != value))
				{
					this._phoness = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_detailUrl", DbType="NVarChar(500)")]
		public string detailUrl
		{
			get
			{
				return this._detailUrl;
			}
			set
			{
				if ((this._detailUrl != value))
				{
					this._detailUrl = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_webSite", DbType="NVarChar(500)")]
		public string webSite
		{
			get
			{
				return this._webSite;
			}
			set
			{
				if ((this._webSite != value))
				{
					this._webSite = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="checked", Storage="_checked", DbType="Bit NOT NULL")]
		public bool @checked
		{
			get
			{
				return this._checked;
			}
			set
			{
				if ((this._checked != value))
				{
					this._checked = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_createTime", DbType="DateTime NOT NULL")]
		public System.DateTime createTime
		{
			get
			{
				return this._createTime;
			}
			set
			{
				if ((this._createTime != value))
				{
					this._createTime = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_updateTime", DbType="DateTime NOT NULL")]
		public System.DateTime updateTime
		{
			get
			{
				return this._updateTime;
			}
			set
			{
				if ((this._updateTime != value))
				{
					this._updateTime = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_stype", DbType="NVarChar(250)")]
		public string stype
		{
			get
			{
				return this._stype;
			}
			set
			{
				if ((this._stype != value))
				{
					this._stype = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(MAX)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this._description = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_services", DbType="NVarChar(MAX)")]
		public string services
		{
			get
			{
				return this._services;
			}
			set
			{
				if ((this._services != value))
				{
					this._services = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_carBrands", DbType="NVarChar(MAX)")]
		public string carBrands
		{
			get
			{
				return this._carBrands;
			}
			set
			{
				if ((this._carBrands != value))
				{
					this._carBrands = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_images", DbType="NVarChar(MAX)")]
		public string images
		{
			get
			{
				return this._images;
			}
			set
			{
				if ((this._images != value))
				{
					this._images = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_llat", DbType="Float")]
		public System.Nullable<double> llat
		{
			get
			{
				return this._llat;
			}
			set
			{
				if ((this._llat != value))
				{
					this._llat = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_llng", DbType="Float")]
		public System.Nullable<double> llng
		{
			get
			{
				return this._llng;
			}
			set
			{
				if ((this._llng != value))
				{
					this._llng = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_distance", DbType="Float")]
		public System.Nullable<double> distance
		{
			get
			{
				return this._distance;
			}
			set
			{
				if ((this._distance != value))
				{
					this._distance = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
